#ifndef POLYGONALMESH_IS_INCLUDED
#define POLYGONALMESH_IS_INCLUDED

#include <list>
#include <ysclass.h>

class PolygonalMesh
{
protected:
    class Vertex
    {
    public:
        YsVec3 pos;
    };
public:
    class VertexHandle
    {
    friend class PolygonalMesh;
    private:
    	unsigned int searchKey;
        std::list <Vertex>::iterator vtxPtr;
	public:
        VertexHandle(){};  // C++11 VertexHandle()=default;
        bool operator==(const VertexHandle &vtHd) const
        {
			return vtHd.vtxPtr==vtxPtr;
		}
        bool operator!=(const VertexHandle &vtHd) const
        {
			return vtHd.vtxPtr!=vtxPtr;
		}
    };
protected:
    class Polygon
    {
    public:
        std::vector <VertexHandle> vtHd;
    };
public:
    class PolygonHandle
    {
    friend class PolygonalMesh;
    private:
        std::list <Polygon>::iterator plgPtr;
    public:
        PolygonHandle(){};  // C++11 PolygonHandle()=default;
        inline bool operator==(const PolygonHandle &plHd) const
        {
			return plHd.plgPtr==plgPtr;
		}
        inline bool operator!=(const PolygonHandle &plHd) const
        {
			return plHd.plgPtr!=plgPtr;
		}
    };


private:
	unsigned int searchKeySeed;
    mutable std::list <Vertex> vtxList;
    mutable std::list <Polygon> plgList;


public:
	PolygonalMesh();


    VertexHandle AddVertex(const YsVec3 &pos);
    inline VertexHandle NullVertex(void) const
	{
		VertexHandle vtHd;
		vtHd.vtxPtr=vtxList.end();
		return vtHd;
	}
    YsVec3 GetVertexPosition(VertexHandle vtHd) const;
	long long int GetNumVertex(void) const;
    bool MoveToNextVertex(VertexHandle &vtHd) const;
    unsigned int GetSearchKey(VertexHandle vtHd) const;
    std::vector <PolygonHandle> FindPolygonFromVertex(VertexHandle vtHd) const;


    PolygonHandle AddPolygon(int nPlVt,const VertexHandle plVtHd[]);
    PolygonHandle AddPolygon(const std::vector <VertexHandle> &plVtHd);
    inline PolygonHandle NullPolygon(void) const
    {
		PolygonHandle plHd;
		plHd.plgPtr=plgList.end();
		return plHd;
	}
    const std::vector <VertexHandle> GetPolygonVertex(PolygonHandle plHd) const;
    long long int GetNumPolygon(void) const;
    bool MoveToNextPolygon(PolygonHandle &plHd) const;



};

#endif
