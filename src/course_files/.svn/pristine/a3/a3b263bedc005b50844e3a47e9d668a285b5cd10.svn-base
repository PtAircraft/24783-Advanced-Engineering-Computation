#include "polygonalmesh.h"

PolygonalMesh::PolygonalMesh()
{
	searchKeySeed=1;
}

////////////////////////////////////////////////////////////

PolygonalMesh::VertexHandle PolygonalMesh::AddVertex(const YsVec3 &pos)
{
	Vertex newVtx;
	newVtx.pos=pos;
	newVtx.searchKey=searchKeySeed;
	vtxList.push_back(newVtx);

	VertexHandle vtHd;
	vtHd.vtxPtr=vtxList.end();
	--vtHd.vtxPtr;

	vtxSearch[searchKeySeed]=vtHd;

	++searchKeySeed;
	return vtHd;
}

YsVec3 PolygonalMesh::GetVertexPosition(VertexHandle vtHd) const
{
	return vtHd.vtxPtr->pos;
}

long long int PolygonalMesh::GetNumVertex(void) const
{
	return vtxList.size();
}
bool PolygonalMesh::MoveToNextVertex(VertexHandle &vtHd) const
{
	if(vtHd!=NullVertex())
	{
		++vtHd.vtxPtr;
	}
	else 
	{
		vtHd.vtxPtr=vtxList.begin();
	}
	if(NullVertex()!=vtHd)
	{
		return true;
	}
	return false;
}

unsigned int PolygonalMesh::GetSearchKey(VertexHandle vtHd) const
{
	if(NullVertex()!=vtHd)
	{
		return vtHd.vtxPtr->searchKey;
	}
	else
	{
		return 0x7fffffff;
	}
}

std::vector <PolygonalMesh::PolygonHandle> PolygonalMesh::FindPolygonFromVertex(VertexHandle vtHd) const
{
	auto found=vtKeyToPlg.find(GetSearchKey(vtHd));
	if(vtKeyToPlg.end()==found)
	{
		return std::vector <PolygonHandle>();
	}
	else
	{
		return found->second;
	}
}


////////////////////////////////////////////////////////////

PolygonalMesh::PolygonHandle PolygonalMesh::AddPolygon(int nPlVt,const VertexHandle plVtHd[])
{
	Polygon plg;
	for(int i=0; i<nPlVt; ++i)
	{
		plg.vtHd.push_back(plVtHd[i]);
	}
	plgList.push_back((Polygon &&)plg);

	PolygonHandle plHd;
	plHd.plgPtr=plgList.end();
	--plHd.plgPtr;

	for(int i=0; i<nPlVt; ++i)
	{
		vtKeyToPlg[GetSearchKey(plVtHd[i])].push_back(plHd);
	}

	return plHd;
}
PolygonalMesh::PolygonHandle PolygonalMesh::AddPolygon(const std::vector <VertexHandle> &plVtHd)
{
	return AddPolygon((int)plVtHd.size(),plVtHd.data());
}
const std::vector <PolygonalMesh::VertexHandle> PolygonalMesh::GetPolygonVertex(PolygonHandle plHd) const
{
	return plHd.plgPtr->vtHd;
}

long long int PolygonalMesh::GetNumPolygon(void) const
{
	return plgList.size();
}
bool PolygonalMesh::MoveToNextPolygon(PolygonHandle &plHd) const
{
	if(plHd!=NullPolygon())
	{
		++plHd.plgPtr;
	}
	else 
	{
		plHd.plgPtr=plgList.begin();
	}
	if(NullPolygon()!=plHd)
	{
		return true;
	}
	return false;
}

bool PolygonalMesh::SetPolygonColor(PolygonHandle plHd,YsColor col)
{
	if(NullPolygon()!=plHd)
	{
		plHd.plgPtr->col=col;
		return true;
	}
	return false;
}
YsColor PolygonalMesh::GetColor(PolygonHandle plHd) const
{
	if(NullPolygon()!=plHd)
	{
		return plHd.plgPtr->col;
	}
	return YsWhite();
}
bool PolygonalMesh::SetPolygonNormal(PolygonHandle plHd,const YsVec3 &nom)
{
	if(NullPolygon()!=plHd)
	{
		plHd.plgPtr->nom=nom;
		return true;
	}
	return false;
}
YsVec3 PolygonalMesh::GetNormal(PolygonHandle plHd) const
{
	if(NullPolygon()!=plHd)
	{
		return plHd.plgPtr->nom;
	}
	return YsVec3::Origin();
}

////////////////////////////////////////////////////////////

void PolygonalMesh::GetBoundingBox(YsVec3 &min,YsVec3 &max)
{
	double minx,miny,minz,maxx,maxy,maxz;

	if(1<=GetNumVertex())
	{
		bool first=true;
		for(auto vtHd=NullVertex(); true==MoveToNextVertex(vtHd); )
		{
			auto vtPos=GetVertexPosition(vtHd);
			if(true==first)
			{
				first=false;
				minx=vtPos.x();
				miny=vtPos.y();
				minz=vtPos.z();
				maxx=vtPos.x();
				maxy=vtPos.y();
				maxz=vtPos.z();
			}
			else
			{
				double x=vtPos.x(),y=vtPos.y(),z=vtPos.z();
				minx=(x<minx ? x : minx);
				miny=(y<miny ? y : miny);
				minz=(z<minz ? z : minz);
				maxx=(x>maxx ? x : maxx);
				maxy=(y>maxy ? y : maxy);
				maxz=(z>maxz ? z : maxz);
			}
		}
		min.Set(minx,miny,minz);
		max.Set(maxx,maxy,maxz);
	}
	else
	{
		min=YsVec3::Origin();
		max=YsVec3::Origin();
	}
}
